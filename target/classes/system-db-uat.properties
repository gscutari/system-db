#------- SECURITY PARAMETERS -------#
anypoint.platform.client_id=2e6bdffad075469dbd690af69b9cbfa9
anypoint.platform.client_secret=ACE3c413d2fb4c6A9B3Ee244f92BC208
anypoint.platform.base_uri=https://anypoint.mulesoft.com
anypoint.platform.analytics_base_uri=https://analytics-ingest.eu1.anypoint.mulesoft.com
anypoint.platform.autodiscovery=16468323

########### SYSTEM-DB ###########
#---------- HTTPS LISTENER INBOUND ----------#
system.db.https.listener.protocol:HTTPS
system.db.https.listener.host:0.0.0.0
system.db.https.listener.port:8082
system.db.https.listener.path:api/*
system.db.https.listener.key.store.type= PKCS12
system.db.https.listener.key.store.path= Traxion_Logistics.p12
system.db.https.listener.key.store.key.password= wWpg9LfX6nxh9Ke3u1L0wxSmYr5y3YKTjAWiTMEa9dww
system.db.https.listener.key.store.password= wWpg9LfX6nxh9Ke3u1L0wxSmYr5y3YKTjAWiTMEa9dww

#---------- GENERIC DB CONFIGURATION----------#
db.host:devtxlintegra.cmmiklfwuiys.us-west-2.rds.amazonaws.com
db.port:3306
db.user:admin
db.password:Dam$586G3ront.
db.database:devintegraciones

#---------- DB-BI CONFIGURATION----------#
db.bi.host:devtxlintegra.cmmiklfwuiys.us-west-2.rds.amazonaws.com
db.bi.port:3306
db.bi.user:admin
db.bi.password:Dam$586G3ront.
db.bi.database:devintegraciones

########### SYSTEM-DB-GENERICGPS ###########
#---------- HTTP LISTENER INBOUND ----------#
db.genericgps.http.listener.protocol:HTTP
db.genericgps.http.listener.host:0.0.0.0
db.genericgps.http.listener.port:8081
db.genericgps.http.listener.path:api/*


#---------- DB QUERY SYSTEM-DB-GENERICGPS ----------#
db.genericgps.eventname.query.validator.select= select count(1) as recordcount from Active_Loads where loadId=:loadId
db.genericgps.eventname.update.query.update.tender.cancelled= UPDATE Active_Loads SET status=:status, statusDescription=:statusDescription WHERE loadId=:loadId;
db.genericgps.eventname.update.query.update.delivered= UPDATE Active_Loads SET status=:status, statusDescription=:statusDescription WHERE loadId=:loadId;
db.genericgps.eventname.update.query.update= UPDATE Active_Loads SET status=:status, statusDescription=:statusDescription, LCTShipmentNumber=:LCTShipmentNumber WHERE loadId=:loadId;
#db.genericgps.db.query.insert: INSERT INTO Active_Loads (loadId, vehiclePlates, carrierName, status, gPSProvider, connectionType, timestampLastUpdate, truckNumber, eventName, trailerNumber, trailerPlates, tractorPlates, statusDescription) values (:loadId, :vehiclePlates, :carrierName, :status, :gPSProvider, :connectionType, :timestampLastUpdate, :truckNumber, :eventName, :trailerNumber, :trailerPlates, :tractorPlates, :statusDescription);
db.genericgps.eventname.update.query.insert= INSERT INTO Active_Loads (loadId, vehiclePlates, carrierName, status, gPSProvider, connectionType, timestampLastUpdate, truckNumber, eventName, trailerNumber, trailerPlates, tractorPlates, statusDescription) values (:loadId, :vehiclePlates, :carrierName, :status, :gPSProvider, :connectionType, :timestampLastUpdate, :truckNumber, :eventName, :trailerNumber, :trailerPlates, :tractorPlates, :statusDescription) ON DUPLICATE KEY UPDATE vehiclePlates = :vehiclePlates, carrierName = :carrierName, status = :status, gPSProvider = :gPSProvider, connectionType = :connectionType, timestampLastUpdate = :timestampLastUpdate, truckNumber = :truckNumber, eventName = :eventName, trailerNumber = :trailerNumber, trailerPlates = :trailerPlates, tractorPlates = :tractorPlates, statusDescription = :statusDescription;
db.genericgps.db.egoba.get= SELECT loadId, vehiclePlates, carrierName, status, gPSProvider, connectionType, truckNumber, timestampLastUpdate, status description, LCTShipmentNumber  FROM Active_Loads where truckNumber = :truckn
db.genericgps.reference.rloadid.query.get= SELECT * FROM Active_Loads WHERE loadId =:loadId AND status =:status ORDER BY timestampLastUpdate DESC LIMIT 1
db.genericgps.reference.trucknumber.query.get= SELECT * FROM Active_Loads WHERE truckNumber =:truckNumber AND status =:status ORDER BY timestampLastUpdate DESC LIMIT 1
db.genericgps.reference.trailernumber.query.get= SELECT * FROM Active_Loads WHERE trailerNumber =:trailerNumber AND status =:status ORDER BY timestampLastUpdate DESC LIMIT 1
db.genericgps.reference.trailerplates.query.get= SELECT * FROM Active_Loads WHERE trailerPlates =:trailerPlates AND status =:status ORDER BY timestampLastUpdate DESC LIMIT 1
db.genericgps.activeloads.query.get= SELECT carrierName FROM Active_Loads WHERE STATUS = "LL_DINTRANS" GROUP BY carrierName

########### SYSTEM-COMMONS-CATALOG ###########
#---------- HTTP LISTENER INBOUND ----------#
commons.catalog.http.listener.protocol:HTTP
commons.catalog.http.listener.host:0.0.0.0
commons.catalog.http.listener.port:8081
commons.catalog.http.listener.path:api/*

#---------- DB QUERY COMMONS CATALOG ----------#
commons.catalog.db.query.validator.select:SELECT COUNT(1) AS recordcount FROM commons_catalog WHERE key_search=:key_search
commons.catalog.db.query.value_result.get: SELECT value_result FROM commons_catalog WHERE catalogName= :catalogName AND key_search= :key_search;
commons.catalog.db.query.insert: INSERT INTO commons_catalog (systemCat, catalogName, key_search, value_result) values ( :systemCat, :catalogName, :key_search, :value_result);


########### SYSTEM-COMMONS-LOGS ###########
#---------- HTTP LISTENER INBOUND ----------#
commons.logs.http.listener.protocol:HTTP
commons.logs.http.listener.host:0.0.0.0
commons.logs.http.listener.port:8081
commons.logs.http.listener.path:api/*

#---------- DB QUERY COMMONS LOGS ----------#
commons.logs.db.query.logs.get: SELECT SOURCE, id, reference1, reference2, reference3, message, date_message FROM commons_logs WHERE id = :id
commons.logs.db.query.logs.insert: INSERT INTO commons_logs (source, id, message, date_message) values (:source, :id, :message, :date)
db.query.insert.logs:INSERT INTO commons_logs (source, id, message_type, reference1, reference2, reference3, message, date_message) values (:source, :id, :message_type, :reference1, :reference2, :reference3, :message, :date)

#---------- DB BI ----------#
bi.loads.upsert: INSERT INTO reports_load (SystemLoadID,CurrencyCode,SystemCalculatedAmount,PreconsolidatedAmount,CurrentLoadOperationalStatusEnumVal,UpdatedDateTime,LoadStartDateTime,LoadEndDateTime,EquipmentTypeCode,CarrierCode,CreatedByUserCode,CustomerName,CommodityCode,FirstShippingLocationCode,FirstShippingLocationDescription,LastShippingLocationCode,LastShippingLocationDescription,DisplayStatusEnumVal) VALUES (:SystemLoadID,:CurrencyCode,:SystemCalculatedAmount,:PreconsolidatedAmount,:CurrentLoadOperationalStatusEnumVal,:UpdatedDateTime,:LoadStartDateTime,:LoadEndDateTime,:EquipmentTypeCode,:CarrierCode,:CreatedByUserCode,:CustomerName,:CommodityCode,:FirstShippingLocationCode,:FirstShippingLocationDescription,:LastShippingLocationCode,:LastShippingLocationDescription,:DisplayStatusEnumVal) ON DUPLICATE KEY UPDATE SystemLoadID = :SystemLoadID,CurrencyCode = :CurrencyCode,SystemCalculatedAmount = :SystemCalculatedAmount,PreconsolidatedAmount = :PreconsolidatedAmount,CurrentLoadOperationalStatusEnumVal = :CurrentLoadOperationalStatusEnumVal,UpdatedDateTime = :UpdatedDateTime,LoadStartDateTime = :LoadStartDateTime,LoadEndDateTime = :LoadEndDateTime,EquipmentTypeCode = :EquipmentTypeCode,CarrierCode = :CarrierCode,CreatedByUserCode = :CreatedByUserCode,CustomerName = :CustomerName,CommodityCode = :CommodityCode,FirstShippingLocationCode = :FirstShippingLocationCode,FirstShippingLocationDescription = :FirstShippingLocationDescription,LastShippingLocationCode = :LastShippingLocationCode,LastShippingLocationDescription = :LastShippingLocationDescription,DisplayStatusEnumVal = :DisplayStatusEnumVal;
bi.shipment.upsert: INSERT INTO reports_shipment (ShipmentDescription,ShipmentNumber,NominalWeight,ReferenceNumber1,ReferenceNumber2,ReferenceNumber3,ReferenceNumber4,PickupFromDateTime,DeliveryToDateTime,SplitShipmentNumber,PickupToDateTime,OverrideDeliveryToDateTime,ReferenceNumber6,CustomerCode,ChargedAmount,AdditionalChargesAmount,ExchangeRate) VALUES (:ShipmentDescription,:ShipmentNumber,:NominalWeight,:ReferenceNumber1,:ReferenceNumber2,:ReferenceNumber3,:ReferenceNumber4,:PickupFromDateTime,:DeliveryToDateTime,:SplitShipmentNumber,:PickupToDateTime,:OverrideDeliveryToDateTime,:ReferenceNumber6,:CustomerCode,:ChargedAmount,:AdditionalChargesAmount,:ExchangeRate)
bi.stops.upsert: INSERT INTO reports_stops (DeliveryArrivalDateTime,DeliveryDepartureDateTime,TrailerLoadingUnloadingEndedDateTime,WeekendHolidayBreakOrientationEnumDescr,PickupArrivalDateTime,StopSequenceNumber,ShippingLocationTypeEnumDescr,CountOfShipmentsPickedAtStop,CountOfShipmentsDroppedAtStop,DistanceFromPreviousStop,SystemLoadID,PickupDepartureDateTime,ActualDateTimeOfArrival,ActualDateTimeOfDeparture) VALUES (:DeliveryArrivalDateTime,:DeliveryDepartureDateTime,:TrailerLoadingUnloadingEndedDateTime,:WeekendHolidayBreakOrientationEnumDescr,:PickupArrivalDateTime,:StopSequenceNumber,:ShippingLocationTypeEnumDescr,:CountOfShipmentsPickedAtStop,:CountOfShipmentsDroppedAtStop,:DistanceFromPreviousStop,:SystemLoadID,:PickupDepartureDateTime,:ActualDateTimeOfArrival,:ActualDateTimeOfDeparture)


#--------- CLIENT HTTP REQUEST DB ---------#

db.query.insert.logs:INSERT INTO commons_logs (source, id, message_type, reference1, reference2, reference3, message, date_message) values (:source, :id, :message_type, :reference1, :reference2, :reference3, :message, :date)
